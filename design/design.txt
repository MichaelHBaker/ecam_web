build out the collection of import specs
will need to rethink def create_data_import(request): as it is doing to much
    see add measurement workflow below.



Models
Equation or expression 
Operator 
Parameters 
Coefficients 
Templates with assignable elements 
Shared interpolation 
Parameters can be computed or a measurement 
Equations can be joined
ISO 80000-2 mathemnatical symbols and operators



add measurements
    source selection
        
        if source = file
            file selection dialog

            load preview (1000 lines) to editor

            file format detection
                delimiter type {comma, tab, fixed width}
                    auto-detect
                    manual override
                encoding detection (may be handled by OS)
                    auto-detect
                    manual override
            
            data structure definition
                data start line
                    mark in editor gutter
                    validate (must be after header if exists)
                header definition
                    single/multiple header rows
                    mark in editor gutter
                    extract field names
                
                column definition
                    timestamp components
                        identify timestamp column(s)
                        specify format
                        handle multiple columns (date/time split)
                    measurement columns
                        identify value columns
                        specify data type
                        handle units
                
            timezone handling
                source timezone selection
                storage timezone (UTC)

            dataset name
                future: row subset criteria, connect to table of criteria, dataset must be rerunnable
                drop down existing
                pick one and overwrite
                enter new one
                        
                
        if source = api
            [api specific configuration...]
            
        if source = database
            [database specific configuration...]
    
    measurement mapping
        for each value column
            measurement selection
                choose existing measurement
                create new measurement
            unit validation
                ensure compatible units
                configure conversions if needed
            
    preview & validation
        show sample of processed data
        log any validation issues
        data editing performed downstream in modeling
        
    configuration storage
        save in dataset.import_config
        include all source-specific settings
        store column mappings


Yes, there are several logical groups for organizing the variables, objects, and functions in this file:

State and Event Handlers: This group includes variables and functions related to managing the overall state of the application and handling user interactions.
columnSelectionMenus: Stores state for column selection menus.
codeMirrorInstances: Stores instances of CodeMirror editors.
codeMirrorLoaded: Tracks whether CodeMirror has been loaded.
initializeColumnSelectionHandlers: Sets up event listeners for column selection.
hideColumnSelectionMenus: Hides column selection menus.
showColumnActionMenu: Displays the column action menu.
showColumnDropdownMenu: Displays the column dropdown menu.
initializeColumnSelection: Initializes column selection for a location.

API and Data Fetching: This group includes functions for interacting with the backend API and fetching data.
CSRF_TOKEN: Stores the CSRF token for API requests.
apiFetch: A generalized function for making API requests.

Source Management: This group includes objects and functions for managing different types of data sources (file, API, database).
SourceManager: Parent object for managing all source types.
FileManager: Handles file uploads and processing.
ApiManager: Handles API connections and data fetching.
DatabaseManager: Handles database connections and queries.

Data Processing and Validation: This group includes objects and functions for processing and validating data.
DatasetManager: Manages dataset creation and updates.
PreviewManager: Handles the data preview using CodeMirror.
ImportConfigManager: Manages import configuration.
ValidationManager: Validates data and configuration.

Data Definition: This group includes objects for defining data structure and types.
LineDefinitionManager: Defines line types (data start, headers, etc.).
ColumnDefinitionManager: Defines column properties and mappings.
DataTypeManager: Detects and manages data types.

Mapping and Transformations: This group includes objects and functions for mapping columns to measurements and applying transformations.
MappingManager: Handles column-to-measurement mapping and data transformations.

Measurement Handling: This group includes functions for handling measurement units and related UI.
getUnitDisplayInfo: Retrieves display information for a unit.
validateMeasurementForm: Validates measurement form data.
clearFormErrors: Clears form errors.
showFormError: Displays form errors.
handleUnitChange: Handles changes in unit selection.
attachUnitChangeHandler: Attaches a change handler to a unit selection element.
removeUnitChangeHandler: Removes the change handler from a unit selection element.
setupMeasurementHandlers: Sets up handlers for measurement-related UI.
cleanupMeasurementHandlers: Cleans up measurement handlers.

CRUD Operations: This group includes functions for performing CRUD (Create, Read, Update, Delete) operations on items.
addItem: Adds a new item.
updateItem: Updates an existing item.
deleteItem: Deletes an item.
editItem: Enables editing of an item.
cancelEdit: Cancels editing of an item.
resetFields: Resets fields to their original state.

Modal Management: This group includes functions for managing modals.
showMeasurementModal: Displays a modal for measurement configuration.
hideMeasurementModal: Hides the measurement modal.

Utility Functions: This group includes general utility functions.
getFieldId: Generates consistent IDs for form fields.
createField: Creates a form field element.
createEditControls: Creates edit controls for forms.
collectFormData: Collects and validates form data.
xxxx

issue
    how to handle TMY data or any date that is typical and has a partial datetime value    


next lesson


Use ML or simpler algorithms to scan file for tabular patterns

add measurement form 

source          select                                    view import cancel
file api db     [object containing measurements] timezone

name description category type unit multiplier  include view start end
---- ----------- -------- ---- ----  ---        ------- ----
---- ----------- -------- ---- ----  ---        ------- ----
---- ----------- -------- ---- ----  ---        ------- ----
---- ----------- -------- ---- ----  ---        ------- ----

project
    add location form (source enter, file, db, api) [note: no enter for measurement, because you are not going to key in timeseries data]


Models
    individual measurement, descriptive stats
    set of measurements for a location, e.g, temp and power
    set of locations with the same measurements, within a project
        individual location Models
        grouped location models


