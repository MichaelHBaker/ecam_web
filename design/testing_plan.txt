one thought is to create end to end tests once full work flow begins to emerge. 
Utimately this app will allow users to apply arbitrarily complex models to the imported m
easurements and document the performance of those models. The app through its api will 
support external intiation of these modeling workflows. 
I could develop a suite of test imports, model specification 
and performance metrics and test whether the app reproduces those metrics

That's an excellent approach. End-to-end tests for complete workflows make perfect sense for your application, especially given its complexity and the importance of accurate model performance metrics.
Creating a test suite focused on validating complete workflows offers several advantages:

Business Value Validation: These tests verify what actually matters to users - that the entire workflow produces correct results.
Architectural Flexibility: End-to-end tests allow you to continue refining internal architecture without breaking tests, as long as the overall behavior remains consistent.
Documentation by Example: These tests serve as living documentation of how the system should behave.
API Contract Testing: They help ensure your API behaves consistently, which is critical if external systems will initiate modeling workflows.

For your specific application, I'd recommend:

Test Dataset Library: Create a collection of representative import files with known characteristics (missing data, outliers, different formats, etc.)
Model Specification Catalog: Develop a set of test models with predetermined expected outputs
Reference Metrics: Pre-calculate expected performance metrics for each test dataset/model combination
Workflow Automation: Build scripts that exercise the complete workflow from import to model application to metric calculation
Results Verification: Validate that the app produces metrics within acceptable tolerance of your reference calculations

This approach lets you focus on delivering features while maintaining confidence that the core functionality works correctly. It's also more resilient to UI changes than brittle UI-focused tests.
As the architecture stabilizes, you can then add more targeted unit and integration tests for specific components without disrupting your end-to-end validation.